using OpenVASP.CSharpClient;
using Xunit;

namespace OpenVASP.Tests
{
    public class SignServiceTest
    {
        public void SignatureTest(string payload, string key)
        {
            
        }
        
        [Theory]
        [InlineData("0x7b2268616e647368616b65223a7b22746f70696361223a2230786132383339373335222c2265636468706b223a22307830343133393866366465326630313263336366613132353564636563306334346339663536386662626133376638363238316137666531623163393665663339333466623833343535613430313266386631353732393533326433336231396138396136383262653565613663633861346636323662346363343665396633646138227d2c2276617370223a7b226e616d65223a225465737456617370436f6e7472616374506572736f6e222c226964223a22307836626566616630363536623935336231383861306565336266336462303364303764666163653631222c22706b223a22307830343330363164636537386137356139373066653766663239373837303032333933313938333938326362383631356266643966653732633532663030343062366266356531613663313530383531373065616339633538346232626637326436323936393439653765643630636161636366306334663665633064333330613564222c2261646472657373223a7b22737472656574223a22536f6d65205374726565744e616d6520222c226e756d626572223a223634222c226164726c696e65223a22536f6d6520416464726573734c696e65222c22706f7374636f6465223a22333130303331222c22746f776e223a22546f776e4e222c22636f756e747279223a224445227d2c226269727468223a7b22626972746864617465223a223230323030313031222c22626972746863697479223a225462696c697369222c226269727468636f756e747279223a224445227d2c226e6174223a5b7b226e617469645f74797065223a332c226e61746964223a22736f6d65206964222c226e617469645f636f756e747279223a224445222c226e617469645f697373756572223a22227d5d7d2c226d7367223a7b2274797065223a3131302c226d73676964223a2230783938616535383336303162636134346461393632333132383266303661363139222c2273657373696f6e223a2230783139626130306631353866656465343638663739313439373666303533373463222c22636f6465223a2231227d2c22636f6d6d656e74223a22227d5d14e41c5cb746d947fc57eaadec866de32b92035f431c50d956a44f9cf4cc5d6b1001708d84cdf2ea7b3d2736e6eaddd40f5aa9ae5b589105b1add2c429589a1c",
            "0x047284760c027b8e799710950c1e2b36ccce5701713e8333ad31e1726a8fea93d53d1adb1fda5c13431459a1967693fff8bba102e944862ae3f2a1a8acbcae49bc")]
        public void SignatureVerificationTest(string payloadAndSignature, string key)
        {
            var payload = payloadAndSignature.Substring(0, payloadAndSignature.Length - 130);
            var sign = "0x" + payloadAndSignature.Substring(payloadAndSignature.Length - 130, 130);
            
            var signService = new WhisperSignService();

            Assert.True(signService.VerifySign(payload, sign, key));
        }
    }
}